---
import Layout from '../layouts/Layout.astro';

import { getCurrentUser } from '../utils/auth';
import { db } from '../utils/db';
import env from "../utils/env";

const user = getCurrentUser(Astro.cookies);
if (!user) {
    return Astro.redirect('/');
}

const mailboxes = await db.request()
    .input('IDuser', user.id)
    .execute('sp_user_mailboxes');
---

<Layout>
    <h1>Your Smart Mailboxes</h1>
    <form autocomplete="off">
        <button id="enroll" type="button">Enroll new Smart Mailbox</button>
        <button id="push" type="button" disabled>Preparing push notifications...</button>
    </form>
    {mailboxes.recordset.map(mailbox =>
        <div class="mailbox" id={`_${mailbox.public_code}`}>
            <h2>{mailbox.public_code}</h2>
            <p>Last seen: {mailbox.last_seen?? "Never seen"}</p>
            <p>Battery status: {mailbox.battery_low? "Low" : "Good"}</p>
            <p>Last push: {mailbox.last_push?? "Never pushed"}</p>
            <form autocomplete="off">
                <label>
                    <input type="checkbox"
                        data-public-code={mailbox.public_code}
                        data-initial={mailbox.subscribed? mailbox.subscribed != 0 : false}
                        disabled
                    />
                    Push notifications
                </label>
            </form>
            <hr />
        </div>
    )}
</Layout>

<style>
    
</style>

<script define:vars={{
    vapidKey: env.vapid.publicKey
}} is:inline>
    const enroll = document.getElementById('enroll');
    const pushBtn = document.getElementById('push');
    const cbs = document.querySelectorAll('input[type="checkbox"][data-public-code]');

    function urlBase64ToUint8Array(base64String) {
        const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding)
            .replace(/\-/g, "+")
            .replace(/_/g, "/");

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    let suspendEvents = false;

    async function pushDelete() {
        localStorage.removeItem('push');
        
        const registrations = await navigator.serviceWorker.getRegistrations();

        for (const registration of registrations) {
            await registration.unregister();
        }
    }

    async function pushAllow() {
        if (suspendEvents) return;

        suspendEvents = true;
        pushBtn.disabled = true;
        pushBtn.textContent = 'Allowing push notifications...';

        let loggedOut = false;
        
        try {
            const registration = await navigator.serviceWorker.register('/js/push.js');

            const subscription = await registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array(vapidKey)
            });
            
            const response = await fetch('/api/push/save', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(subscription),
            });

            if (response.ok) {
                const IDpush = await response.json();
                localStorage.setItem('push', JSON.stringify({ IDpush, subscription }));
                
                cbs.forEach(cb => cb.disabled = false);
                
                pushBtn.removeEventListener('click', pushDisallow);
                pushBtn.removeEventListener('click', pushAllow);
                pushBtn.textContent = 'Disallow push notifications';
                pushBtn.addEventListener('click', pushDisallow);

            } else if (response.status === 401) {
                pushBtn.textContent = 'You were logged out';
                loggedOut = true;

            } else {
                throw new Error(response.statusText);
            }

        } catch (error) {
            console.error('Failed to allow push notifications:', error);
            pushBtn.textContent = 'Allow push notifications';

        } finally {
            if (loggedOut) {
                setTimeout(() => { window.location = '/'; }, 1000);
            } else {
                pushBtn.disabled = false;
                suspendEvents = false;
            }
        }
    };

    async function pushDisallow(updateUI = false) {
        if (updateUI) {
            if (suspendEvents) return;

            suspendEvents = true;
            pushBtn.disabled = true;
            pushBtn.textContent = 'Disallowing push notifications...';
        }

        let loggedOut = false;
        
        try {
            const IDpush = JSON.parse(localStorage.getItem('push')).IDpush;

            const response = await fetch('/api/push/expire', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(IDpush),
            });

            if (response.ok) {
                await pushDelete();
                
                if (updateUI) {
                    cbs.forEach(cb => {
                        cb.checked = false;
                        cb.disabled = true;
                    });

                    pushBtn.removeEventListener('click', pushDisallow);
                    pushBtn.removeEventListener('click', pushAllow);
                    pushBtn.textContent = 'Allow push notifications';
                    pushBtn.addEventListener('click', pushAllow);
                }

            } else if (response.status === 401) {
                pushBtn.textContent = 'You were logged out';
                loggedOut = true;

            } else {
                throw new Error(response.statusText);
            }

        } catch (error) {
            console.error('Failed to disallow push notifications:', error);
            if (updateUI) {
                pushBtn.textContent = 'Disallow push notifications';
            }

        } finally {
            if (loggedOut) {
                setTimeout(() => { window.location = '/'; }, 1000);
            } else if (updateUI) {
                pushBtn.disabled = false;
                suspendEvents = false;
            }
        }
    };

    async function pushExists(subscription) {
        let loggedOut = false;
        
        try {
            const response = await fetch('/api/push/exists', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(subscription),
            });

            if (response.ok) {
                const exists = await response.json();
                if (!exists) await pushDelete();

            } else if (response.status === 401) {
                pushBtn.textContent = 'You were logged out';
                loggedOut = true;

            } else {
                throw new Error(response.statusText);
            }

        } catch (error) {
            console.error('Failed to check for push notifications:', error);

        } finally {
            if (loggedOut) {
                setTimeout(() => { window.location = '/'; }, 1000);
            }
        }
    };

    let suspendCheckbox = false;
    let wasDisabledCheckbox = false;

    async function subscribe(cb) {
        if (suspendCheckbox || wasDisabledCheckbox) return;

        if (suspendEvents) {
            wasDisabledCheckbox = true;
            cb.checked = !cb.checked;
            wasDisabledCheckbox = false;
            return;
        }

        suspendEvents = true;
        cb.disabled = true;
        
        suspendCheckbox = true;
        let enabled = cb.checked;
        cb.checked = !cb.checked;
        suspendCheckbox = false;

        let loggedOut = false;
        
        try {
            const public_code = cb.dataset.publicCode;
            const { IDpush } = JSON.parse(localStorage.getItem('push'));

            const response = await fetch('/api/subscription/change', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ public_code, IDpush, enabled }),
            });

            if (response.ok) {
                suspendCheckbox = true;
                cb.checked = !cb.checked;
                suspendCheckbox = false;

            } else if (response.status === 401) {
                pushBtn.textContent = 'You were logged out';
                loggedOut = true;

            } else {
                throw new Error(response.statusText);
            }

        } catch (error) {
            console.error('Failed to subscribe to push notification:', error);

        } finally {
            if (loggedOut) {
                setTimeout(() => { window.location = '/'; }, 1000);
            } else {
                cb.disabled = false;
                suspendEvents = false;
            }
        }
    }

    document.addEventListener('DOMContentLoaded', async () => {
        enroll?.addEventListener('click', () => {
            if (suspendEvents) return;
            window.location.href = '/enroll';
        });

        if ('serviceWorker' in navigator && 'PushManager' in window) {
            const pushStr = localStorage.getItem('push');

            if (pushStr != null) {
                const push = JSON.parse(pushStr);

                const registration = await navigator.serviceWorker.getRegistration('/js/push.js');
                const subscription = await registration?.pushManager.getSubscription();

                if (!subscription || JSON.stringify(subscription) !== JSON.stringify(push.subscription)) {
                    await pushDisallow(false);
                
                } else {
                    await pushExists(subscription);
                }
            }

            if (localStorage.getItem('push') != null) {
                cbs.forEach(cb => {
                    cb.checked = cb.dataset.initial === 'true';
                    cb.disabled = false;
                });

                pushBtn.textContent = 'Disallow push notifications';
                pushBtn.addEventListener('click', pushDisallow);

            } else {
                pushBtn.textContent = 'Allow push notifications';
                pushBtn.addEventListener('click', pushAllow);
            }
            pushBtn.disabled = false;

        } else {
            pushBtn.textContent = 'Push notifications unsupported';
        }

        cbs.forEach(cb => {
            cb.dataset.initial = null;
            cb.addEventListener('change', async () => await subscribe(cb));
        });
    });
</script>
